#include "stm32l4xx.h"


//#define GPIOCEN 		(1U<<2)
//// enable ADC on RCC
//#define ADCEN			(1U<<13)
//
//// PC0 is ADC 1, 2 and 3 channel 1
//#define ADC_CH0			(1U<<1)
//
//#define ADC_SEQ_LEN1 	0x00
//
//#define CR_ADON 		(1U<<0)
//#define ADC_START		(1U<<2)
//#define ADC_EOC 		(1U<<2)

// copying tutorial

#define GPIOAEN		(1U<<0)
#define ADCEN		(1U<<13)

//#define ADC_CH6 	0x110

void pc0_adc_init(void){

	/*** Configure the ADC GPIO pin ***/
//
//	/* Enable clock access to GPIOC*/
//	RCC->AHB2ENR |= GPIOCEN;
//
//	/* Set the mode of PC0 to Analog*/
//	GPIOC->MODER |= (1U<<2);
//	GPIOC->MODER |= (1U<<3);

	// copying tutorial
	// enable clock access PA1 (ch6)
	RCC->AHB2ENR |= GPIOAEN;

	GPIOA->MODER |= (1U<<2);
	GPIOA->MODER |= (1U<<3);

	//RCC->AHB2ENR |= ADCEN;

	/*** Configure the ADC Module ***/

	/* Enable clock access to ADC*/
	RCC->AHB2ENR |= ADCEN;

	/* Conversion sequence start */
	ADC1->SQR1  = (1U<<7);//ADC_CH0;
	ADC1->SQR1 =  (1U<<8);

	/* Conversion Sequence Length */
	ADC1->SQR1 |= ADC_SEQ_LEN1;

	/* Enable ADC module*/
	ADC1->CR |= CR_ADON;

}

void start_conversion(void){
	/* Start ADC conversion */
	ADC1->CR |= ADC_START;

}

uint32_t adc_read(void){
	/* Wait for conversion to be complete */
	while(!(ADC1->ISR & ADC_EOC)){}

	/* Read converted result */
	return (ADC1->DR);

}




