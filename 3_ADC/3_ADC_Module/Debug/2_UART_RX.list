
2_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000478  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000470  08000470  00010478  2**0
                  CONTENTS
  4 .ARM          00000000  08000470  08000470  00010478  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000470  08000478  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010478  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000137c  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000362  00000000  00000000  00011824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00011c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d482  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d46  00000000  00000000  0002f112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a28b0  00000000  00000000  0002fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d2708  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  000d275c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000458 	.word	0x08000458

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000458 	.word	0x08000458

080001c8 <main>:

#define LED_PIN				GPIOA_5

char key;

int main (void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	/* Enable Clock Access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 80001cc:	4b19      	ldr	r3, [pc, #100]	; (8000234 <main+0x6c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d0:	4a18      	ldr	r2, [pc, #96]	; (8000234 <main+0x6c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c

	/* Set PA5 (LED) as output */
	GPIOA->MODER |= (1U<<10);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f6:	6013      	str	r3, [r2, #0]

    uart2_rx_tx_init();
 80001f8:	f000 f820 	bl	800023c <uart2_rx_tx_init>

    while (1){

    	key = uart2_read();
 80001fc:	f000 f8a4 	bl	8000348 <uart2_read>
 8000200:	4603      	mov	r3, r0
 8000202:	461a      	mov	r2, r3
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <main+0x70>)
 8000206:	701a      	strb	r2, [r3, #0]
    	if (key == '1'){
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <main+0x70>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b31      	cmp	r3, #49	; 0x31
 800020e:	d108      	bne.n	8000222 <main+0x5a>
    		GPIOA->ODR |= LED_PIN;
 8000210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021a:	f043 0320 	orr.w	r3, r3, #32
 800021e:	6153      	str	r3, [r2, #20]
 8000220:	e7ec      	b.n	80001fc <main+0x34>
    	}
    	else{
    		GPIOA->ODR &=~LED_PIN;
 8000222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000226:	695b      	ldr	r3, [r3, #20]
 8000228:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022c:	f023 0320 	bic.w	r3, r3, #32
 8000230:	6153      	str	r3, [r2, #20]
    	key = uart2_read();
 8000232:	e7e3      	b.n	80001fc <main+0x34>
 8000234:	40021000 	.word	0x40021000
 8000238:	2000001c 	.word	0x2000001c

0800023c <uart2_rx_tx_init>:

	uart2_write(ch);
	return ch;
}

void uart2_rx_tx_init (void){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

    /*************** Configure UART GPIO PIN **************/

    /* Enable Clock Access to GPIOA */
    RCC->AHB2ENR |= GPIOAEN;
 8000240:	4b3e      	ldr	r3, [pc, #248]	; (800033c <uart2_rx_tx_init+0x100>)
 8000242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000244:	4a3d      	ldr	r2, [pc, #244]	; (800033c <uart2_rx_tx_init+0x100>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Set PA2 mode to alternate function mode */
    GPIOA->MODER &=~(1<<4);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f023 0310 	bic.w	r3, r3, #16
 800025a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<5);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6013      	str	r3, [r2, #0]

    /* Set PA2 alternate function type to UART_TX (AF07)*/
    GPIOA->AFR[0] |= (1<<8);
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	6a1b      	ldr	r3, [r3, #32]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<9);
 800027c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000280:	6a1b      	ldr	r3, [r3, #32]
 8000282:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<10);
 800028c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000290:	6a1b      	ldr	r3, [r3, #32]
 8000292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &=~(1<<11);
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	6a1b      	ldr	r3, [r3, #32]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002aa:	6213      	str	r3, [r2, #32]

    /* Set PA3 mode to alternate function mode */
    GPIOA->MODER &=~(1<<6);
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<7);
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6013      	str	r3, [r2, #0]

    /* Set PA3 alternate function type to UART_RX (AF07)*/
    GPIOA->AFR[0] |= (1<<12);
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002da:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<13);
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e0:	6a1b      	ldr	r3, [r3, #32]
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<14);
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f0:	6a1b      	ldr	r3, [r3, #32]
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &=~(1<<15);
 80002fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000300:	6a1b      	ldr	r3, [r3, #32]
 8000302:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000306:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030a:	6213      	str	r3, [r2, #32]

    /*************** Configure UART Module **************/
    /* Enable clock access to UART */
    RCC->APB1ENR1 |= UART2EN;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <uart2_rx_tx_init+0x100>)
 800030e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <uart2_rx_tx_init+0x100>)
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	6593      	str	r3, [r2, #88]	; 0x58

    /* Configure UART Baud Rate */
    uart_set_baudrate(USART2, APB1_CLK,UART_BAUDRATE);
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	4908      	ldr	r1, [pc, #32]	; (8000340 <uart2_rx_tx_init+0x104>)
 800031e:	4809      	ldr	r0, [pc, #36]	; (8000344 <uart2_rx_tx_init+0x108>)
 8000320:	f000 f826 	bl	8000370 <uart_set_baudrate>

    /* Configure the transfer direction */
    USART2->CR1 =  (CR1_TE | CR1_RE);
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <uart2_rx_tx_init+0x108>)
 8000326:	220c      	movs	r2, #12
 8000328:	601a      	str	r2, [r3, #0]

    /* Enable UART Module */
    USART2->CR1 |= CR1_UE;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <uart2_rx_tx_init+0x108>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <uart2_rx_tx_init+0x108>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	003d0900 	.word	0x003d0900
 8000344:	40004400 	.word	0x40004400

08000348 <uart2_read>:
    /* Enable UART Module */
    USART2->CR1 |= CR1_UE;

}

char uart2_read(void){
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	/* Make sure receive register is not empty*/
	while(!(USART2->ISR & SR_RXE)){}
 800034c:	bf00      	nop
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <uart2_read+0x24>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 0320 	and.w	r3, r3, #32
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <uart2_read+0x6>

	return USART2->RDR;
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <uart2_read+0x24>)
 800035c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800035e:	b29b      	uxth	r3, r3
 8000360:	b2db      	uxtb	r3, r3
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40004400 	.word	0x40004400

08000370 <uart_set_baudrate>:
    /* Write to transmit data register */
    USART2->TDR = (ch & 0xFF);

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]

    USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	68b8      	ldr	r0, [r7, #8]
 8000380:	f000 f808 	bl	8000394 <compute_uart_bd>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]

    return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	085a      	lsrs	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	441a      	add	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ac:	b29b      	uxth	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff feeb 	bl	80001c8 <main>

080003f2 <LoopForever>:

LoopForever:
    b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000478 	.word	0x08000478
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	20000020 	.word	0x20000020

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4d0d      	ldr	r5, [pc, #52]	; (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	; (800044c <__libc_init_array+0x3c>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2600      	movs	r6, #0
 800041c:	42a6      	cmp	r6, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4d0b      	ldr	r5, [pc, #44]	; (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	; (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2600      	movs	r6, #0
 800042e:	42a6      	cmp	r6, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f855 3b04 	ldr.w	r3, [r5], #4
 8000438:	4798      	blx	r3
 800043a:	3601      	adds	r6, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000442:	4798      	blx	r3
 8000444:	3601      	adds	r6, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
